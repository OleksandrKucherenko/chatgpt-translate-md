{
  "$schema": "https://json.schemastore.org/tsconfig",
  "extends": "@tsconfig/node18/tsconfig.json",

  "compilerOptions": {
    "baseUrl": "./" /* Projects */,
    "composite": true /* Enable constraints that allow a TypeScript project to be used with project references. */,
    "incremental": true /* Save .tsbuildinfo files to allow for incremental compilation of projects. */,

    /* Emit */
    "declaration": true /* Generate .d.ts files from TypeScript and JavaScript files in your project. */,
    "declarationMap": true /* Create sourcemap for each corresponding '.d.ts' file. */,
    "sourceMap": true /* Create source map files for emitted JavaScript files. */,
    "outDir": "./build" /* Specify an output folder for all emitted files. */,
    "importHelpers": true /* Allow importing helper functions from tslib once per project, instead of including them per-file. */,
    "allowSyntheticDefaultImports": true /* Allow 'import x from y' when a module doesn't have a default export. */,

    /* Language and Environment */
    "lib": [
      "ES2022" /* closest to Node 18 */,
      "dom" /* for DOM, fetch API available */
    ] /* Specify a set of bundled library declaration files that describe the target runtime environment. */,
    "experimentalDecorators": true /* Enable experimental support for TC39 stage 2 draft decorators. */,
    "emitDecoratorMetadata": true /* Emit design-type metadata for decorated declarations in source files. */,
    "target": "ES2022" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,

    /* Interop Constraints */
    "esModuleInterop": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */,
    "forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,

    /* JavaScript Support */
    "allowJs": true /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */,

    /* Type Checking */
    "strict": true /* Enable all strict type-checking options. */,
    "noImplicitAny": true /* Enable error reporting for expressions and declarations with an implied 'any' type. */,
    "strictNullChecks": true /* When type checking, take into account 'null' and 'undefined'. */,
    "strictFunctionTypes": true /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */,
    "noUnusedLocals": true /* Enable error reporting when local variables aren't read. */,
    "noUnusedParameters": true /* Raise an error when a function parameter isn't read. */,
    "noImplicitReturns": true /* Enable error reporting for codepaths that do not explicitly return in a function. */,
    "noFallthroughCasesInSwitch": true /* Enable error reporting for fallthrough cases in switch statements. */,

    /* Completeness */
    "skipLibCheck": true /* Skip type checking all .d.ts files. */,

    /* Modules */
    "module": "ES2022" /* Specify what module code is generated. */,
    "moduleResolution": "node" /* Specify how TypeScript looks up a file from a given module specifier. */,
    "types": ["node", "jest"] /* Type declaration files to be included in compilation. */
  },
  "ts-node": {
    "esm": true,
    "experimentalSpecifierResolution": "node"
  },
  /* By default, we expect `src/` folder be available, so for packages we need to override it */
  "include": ["clis/**/*", "packages/**/*", "services/**/*", "websites/**/*"],
  "exclude": ["node_modules", "dist", "build"],
  /* Workspace support */
  "references": [
    {
      "path": "clis/gpt"
    },
    {
      "path": "packages/arguments"
    },
    {
      "path": "packages/configuration"
    }
  ]
}
